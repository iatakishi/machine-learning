# Import libraries
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

# Machine Learning libraries
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Load the dataset
data = pd.read_csv('customer_churn_data.csv')  # Replace with actual dataset path

# Data Exploration and Cleaning
print(data.info())  # Check data types and null values
print(data.describe())  # Statistical summary of numerical features

# Check for null values
missing_values = data.isnull().sum()
print("Missing values:\n", missing_values)

# Handling missing values (if any)
data = data.fillna(data.median())  # Replace null values with median values for simplicity

# Label Encoding categorical features
categorical_cols = data.select_dtypes(include='object').columns
for col in categorical_cols:
    data[col] = LabelEncoder().fit_transform(data[col])

# Feature Selection and Correlation Analysis
correlation_matrix = data.corr()
plt.figure(figsize=(12, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')
plt.show()

# Split data into features (X) and target (y)
X = data.drop(['Churn'], axis=1)  # 'Churn' is assumed to be the target variable
y = data['Churn']

# Split into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Feature Scaling
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Model Selection and Training

# Logistic Regression Model
log_reg = LogisticRegression()
log_reg.fit(X_train, y_train)
log_reg_pred = log_reg.predict(X_test)
log_reg_accuracy = accuracy_score(y_test, log_reg_pred)
print("Logistic Regression Accuracy: ", log_reg_accuracy)
print(classification_report(y_test, log_reg_pred))

# Random Forest Classifier Model
rf_clf = RandomForestClassifier(n_estimators=100, random_state=42)
rf_clf.fit(X_train, y_train)
rf_pred = rf_clf.predict(X_test)
rf_accuracy = accuracy_score(y_test, rf_pred)
print("Random Forest Accuracy: ", rf_accuracy)
print(classification_report(y_test, rf_pred))

# Support Vector Classifier Model
svc_clf = SVC(kernel='rbf')
svc_clf.fit(X_train, y_train)
svc_pred = svc_clf.predict(X_test)
svc_accuracy = accuracy_score(y_test, svc_pred)
print("SVC Accuracy: ", svc_accuracy)
print(classification_report(y_test, svc_pred))

# Hyperparameter Tuning with Grid Search for the best performing model (Random Forest)
param_grid = {
    'n_estimators': [50, 100, 200],
    'max_depth': [None, 10, 20, 30],
    'min_samples_split': [2, 5, 10]
}

grid_search = GridSearchCV(estimator=rf_clf, param_grid=param_grid, cv=3, n_jobs=-1, verbose=2)
grid_search.fit(X_train, y_train)

best_rf_clf = grid_search.best_estimator_
best_rf_pred = best_rf_clf.predict(X_test)
best_rf_accuracy = accuracy_score(y_test, best_rf_pred)
print("Optimized Random Forest Accuracy: ", best_rf_accuracy)
print(classification_report(y_test, best_rf_pred))

# Model Evaluation - Confusion Matrix
conf_matrix = confusion_matrix(y_test, best_rf_pred)
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues')
plt.title("Confusion Matrix - Optimized Random Forest Model")
plt.xlabel("Predicted Label")
plt.ylabel("True Label")
plt.show()

# Feature Importance Plot for Random Forest
importances = best_rf_clf.feature_importances_
indices = np.argsort(importances)[::-1]
plt.figure(figsize=(10, 6))
plt.title("Feature Importances in Optimized Random Forest Model")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), X.columns[indices], rotation=90)
plt.show()
